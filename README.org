#+title: Euler's method
At the end of my AP Calculus class we developed a python model to demonstrate euler's method. If you are curious about the concept, check [[https://daniel-alves-rosel.netlify.app/kb/20220204103018-linear_approximation.html][this]] out.


[[./fig.png]]

* Importing
#+begin_src python :tangle eulers_method.py
import numpy as np
import random
import math
import matplotlib.pyplot as plt
#+end_src

* Custom Classes
These definitions are necessary for the functioning of the program.

** Function
A pretty simple and self-explanatory definition. Might seem redundant but is good for scalability.
#+begin_src python :tangle eulers_method.py
class Function:
    def compute(x, y):
        return None
#+end_src

** Initial Data of Differential Equation
This is a core component of the entire program, as it houses data of the differential equation and its initial condition
#+begin_src python :tangle eulers_method.py
class InitialData:
    def __init__(self, derivative_function, point):
        self.derivative_function = derivative_function
        self.point = point
#+end_src

** Simple approximation function
This function takes initial data and uses a single step to reach the approximation target.
#+begin_src python :tangle eulers_method.py
def approximate(init, new):
    y = init.point[1] + \
        (new - init.point[0]) * \
        init.derivative_function.compute(
            init.point[0],
            init.point[1]
        )
    return (new,y)
#+end_src

** Multi-step approximation function
A compound version of [[Simple approximation function]], allowing for multiple steps within a certain range
#+begin_src python :tangle eulers_method.py
def approximate_with_steps(init, start, end, steps):
    p_approx = init.point
    delta = (end - start) / steps
    r = np.arange(start, end+delta, delta)
    for i in r:
        d = InitialData(init.derivative_function, p_approx)
        p_approx = apporoximate(d, i)
    return p_approx
#+end_src


* Execution
To give the above code some meaning, we need an example of how to use it.
** Configuration
#+begin_src python :tangle eulers_method.py
class function(Function):
    def compute(x,y):
        return np.sin(x*y)

ic_s = (0,1) # initial condition (x,y)
mx = 30 # max evaluation x -- x: [0,mx]

def solution(x): # solution to the differential equation
    return 5*x - 7

res_range = [0.01, 2]
approximations = 5
#+end_src


** Parsing inputs configuration
#+begin_src python :tangle eulers_method.py
ic = ic_s
data = InitialData(function, ic)
error_plot_cache = []

resolutions = np.round_(np.arange(res_range[0], res_range[1], (res_range[1]-res_range[0])/approximations), 3)
#+end_src

** Generating approximations
#+begin_src python :tangle eulers_method.py
for res in resolutions:

    ys = []
    ysc = []

    rng = np.arange(ic_s[0], mx+res, res)
    for i in rng:
        ic = approximate(
            InitialData(function, ic),
            i)
        ys.append(ic[1])
        ysc.append(solution(i))

    plt.subplot(1,2,1)
    plt.plot(rng, ys, label = "Step Size: " + str(res) )

    ys = np.array(ys)
    ysc = np.array(ysc)

    error = np.abs(ysc-ys)

    plt.subplot(1,2,2)
    plt.plot(rng,error , label = "Îµ for step size " + str(res))

    ic = ic_s
#+end_src

* Finalization
#+begin_src python :tangle eulers_method.py
rng_og = np.arange(ic_s[0], mx, 0.1)
plt.subplot(1,2,1)
#plt.plot(rng_og, solution(rng_og), label = "Solution") # Uncomment to show real solution
#+end_src

** Legends and show
#+begin_src python :tangle eulers_method.py
plt.legend()
plt.subplot(1,2,2)
plt.legend()
plt.show()
#+end_src
